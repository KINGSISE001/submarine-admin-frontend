package com.htnova.<%= module %>.entity;

import lombok.AllArgsConstructor;
import lombok.experimental.SuperBuilder;
import lombok.Data;
import lombok.NoArgsConstructor;
import com.htnova.common.base.BaseEntity;
import com.htnova.<%= module %>.dto.<%= Entity %>Dto;
import com.htnova.<%= module %>.mapstruct.<%= Entity %>MapStruct;
import org.mapstruct.factory.Mappers;
import java.math.BigDecimal;
import java.time.LocalDateTime;
import com.baomidou.mybatisplus.annotation.TableField;
import com.baomidou.mybatisplus.annotation.TableName;

@AllArgsConstructor
@NoArgsConstructor
@Data
@SuperBuilder
@TableName("<%= StrUtil.camelToUnderscore(tableName) %>")
public class <%= Entity %> extends BaseEntity {
<%_
    var baseField = ['id', 'remark', 'createBy', 'createTime', 'updateBy', 'updateTime', 'delFlag'];
    var dicList = []
    function getType(field) {
        if(field.dicType) {
          dicList.push(StrUtil.initialUpperCase(field.dicType))
          return StrUtil.initialUpperCase(field.dicType)
        }
        var sqlType = field.type;
        if(sqlType == 'varchar') return 'String';
        if(sqlType == 'char') return 'String';
        if(sqlType == 'text') return 'String';
        if(sqlType == 'bigint') return 'Long';
        if(sqlType == 'double') return 'Double';
        if(sqlType == 'decimal') return 'BigDecimal';
        if(sqlType == 'datetime') return 'LocalDateTime';
        if(sqlType == 'int') return 'Integer';
    }
    function genStr(fields) {
        let result = "";
        fields.forEach(function(field){
            if(!baseField.includes(field.field)) {
                if(field.comment) {
                    result += "\n\n\t/**"
                    result += `\n\t* ${field.comment}`
                    result += `\n\t*/`
                }
                result += `\n\tprivate ${getType(field)} ${field.field};`

                if(field.sqlType === 'BETWEEN') {
                    result += `\n\n\t@TableField(exist=false)`
                    result += `\n\tprivate ${getType(field)} begin${ StrUtil.initialUpperCase(field.field) };`
                    result += `\n\n\t@TableField(exist=false)`
                    result += `\n\tprivate ${getType(field)} end${ StrUtil.initialUpperCase(field.field) };`
                }
            }
        })
        return result;
    }
-%>
    <%= genStr(fields) %>

    <% dicList.forEach(dic => { %>
    public enum <%= dic %> {}

    <% }) %>
}
