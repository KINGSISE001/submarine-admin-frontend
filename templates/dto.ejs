package com.htnova.<%= module %>.dto;

import lombok.AllArgsConstructor;
import lombok.Builder;
import lombok.Data;
import lombok.NoArgsConstructor;
import com.htnova.common.base.BaseEntity;
import com.htnova.<%= module %>.entity.<%= Entity %>;
import com.htnova.<%= module %>.mapstruct.<%= Entity %>MapStruct;
import org.mapstruct.factory.Mappers;
import java.math.BigDecimal;
import java.util.Date;

import javax.validation.constraints.Max;
import javax.validation.constraints.Min;
import javax.validation.constraints.NotNull;
import javax.validation.constraints.Size;

@AllArgsConstructor
@NoArgsConstructor
@Data
@Builder
public class <%= Entity %>Dto extends BaseEntity {
<%_
    var baseField = ['id', 'remark', 'createBy', 'createTime', 'updateBy', 'updateTime', 'delFlag'];
    function getType(field) {
        if(/select/.test(field.formType) && field.dicType) {
          return `${ Entity }.${ StrUtil.initialUpperCase(field.dicType) }`
        }
        if(field.type == 'varchar') return 'String';
        if(field.type == 'text') return 'String';
        if(field.type == 'bigint') return 'Long';
        if(field.type == 'double') return 'Double';
        if(field.type == 'decimal') return 'BigDecimal';
        if(field.type == 'datetime') return 'Date';
        if(field.type == 'int') return 'Integer';
    }
    function genStr(fields) {
        let result = "";
        fields.forEach(function(field){
            if(!baseField.includes(field.field)) {
                if(field.comment) {
                    result += "\n\n\t/**"
                    result += `\n\t* ${field.comment}`
                    result += `\n\t*/`
                }
                if(field.isNotNull) {
                    result += `\n\t@NotNull(message = "${field.comment}不能为空")`
                }
                if(field.strLenRange) {
                    let range =  field.strLenRange.split(",");
                    result += `\n\t@Size(min = ${range[0]}, max = ${range[1]}, message = "${field.comment}的字符长度必须在 ${range[0]} 到 ${range[1]} 之间")`
                }
                if(field.numRange) {
                    let range =  field.numRange.split(",");
                    result += `\n\t@Min(value = ${range[0]}, message = "${field.comment}不能小于 ${range[0]} ")`
                    result += `\n\t@Max(value = ${range[1]}, message = "${field.comment}不能大于 ${range[1]} ")`
                }
                result += `\n\tprivate ${getType(field)} ${field.field};`

                if(field.sqlType === 'BETWEEN') {
                    result += `\n\n\tprivate ${getType(field)} begin${ StrUtil.initialUpperCase(field.field) };`
                    result += `\n\n\tprivate ${getType(field)} end${ StrUtil.initialUpperCase(field.field) };`
                }
            }
        })
        return result;
    }
-%>
    <%- genStr(fields) %>

}
